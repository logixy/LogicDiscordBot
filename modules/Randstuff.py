import asyncio
import random
from collections import Counter
from urllib.parse import urlparse
from discord.ext import commands
from discord import app_commands, Embed, Colour, Interaction, Message
from modules.utils import webhandler


class Randstuff(commands.Cog, name="Randstuff"):
    def __init__(self, bot):
        self.bot = bot
        self.embed = Embed(
          title="RandStuff",
          description="content",
          colour=Colour.gold())

    @app_commands.command(name="joke", description="Generate random joke")
    async def joke_command(self, interraction: Interaction):
        self.embed.title = "–ê–Ω–µ–∫–¥–æ—Ç"
        self.embed.description = self.get_joke()
        await interraction.response.send_message(embed=self.embed)

    @app_commands.command(name="fact", description="Generate random fact")
    async def fact_command(self, interraction: Interaction):
        self.embed.title = "–§–∞–∫—Ç"
        self.embed.description = self.get_fact()
        await interraction.response.send_message(embed=self.embed)
    
    @app_commands.command(name="where", description="Where?")
    async def where_command(self, interraction: Interaction):
        await interraction.response.send_message(self.get_where())

    @app_commands.command(name = "whoami", description = "Who am i?")
    async def whoami_command(self, interaction: Interaction):
        await interaction.response.send_message(f"–¢—ã - {self.gen_rand_word(2)}.")

    @app_commands.command(name = "whoisit", description = "Who is it?")
    async def whoisit_command(self, interaction: Interaction):
        await interaction.response.send_message(f"–Ø –¥—É–º–∞—é, –æ–Ω  - {self.gen_rand_word(2)}.")

    @app_commands.command(name="randnick", description="Generates a random nick for you")
    async def randnick_command(self, interaction: Interaction):
        self.embed.title = "–ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–π —Å—Ç–æ–ª (–Ω–∞–≤–µ—Ä–Ω–æ–µ)"
        self.embed.description = random.choice(["–ü—Ä–∏–¥—É–º—ã–≤–∞–µ–º...",
           "–í—ã—á–∏—Å–ª—è–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è...", "–°–ø—Ä–∞—à–∏–≤–∞–µ–º –º–∏–º–æ–ø—Ä–æ—Ö–æ–¥—è—â–∏—Ö...",
           "–ó–∞–≤—ë–º —Ç—ë—Ç—é –ì–∞–ª—é...", "–î–µ–ª–∞–µ–º —Å–µ—Ä—å—ë–∑–Ω—ã–π –≤–∏–¥..."])
        await interaction.response.send_message(embed=self.embed)
        asyncio.sleep(3)
        newNick = self.get_rand_nickname()
        try:
            await interaction.user.edit(nick=newNick)
        except:
            msg = '–ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –í–∞–º –Ω–æ–≤–æ–µ –∏–º—è: **' + newNick + '**\n' + \
                '–ù–æ, —Å–ª—É–∂–±—ã —Å–≤—ã—à–µ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –Ω–∞–º –≤–º–µ—à–∏–≤–∞—Ç—å—Å—è. –¢–∞–∫ —á—Ç–æ —Å–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é.'
        else:
            msg = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, **' + newNick + '**, –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–∏–¥–µ–ª–∏ :face_with_hand_over_mouth:\n'
        self.embed.description = msg
        await interaction.edit_original_response(embed=self.embed)
    
    @app_commands.command(name = "google", description = "Search in google.")
    async def google_command(self, interaction, search_msg:str):
        search_msg = '+'.join(search_msg.split())
        res_mess = f"–Ø –¥—É–º–∞—é, —ç—Ç–æ –∑–¥–∞—Å—å: [Google](https://www.google.com/search?q={search_msg})"
        await interaction.response.send_message(res_mess)

    @app_commands.command(name = "surl", description = "Short the link")
    async def surl_command(self, interaction: Interaction, link:str):
        embed = Embed(color=Colour.orange(), title="üîó URL shorter")
        if self.is_url(link) is False:
            embed.description = "Link is not valid url"
            await interaction.response.send_message(embed=embed)
            return
        
        embed.description = "Shorted link: {}".format(self.short_url(link))
        await interaction.response.send_message(embed=embed)

    
    def short_url(self, url):
        base_url = 'http://tinyurl.com/api-create.php'
        data = {'url': url}
        response = webhandler.post(base_url, data=data)
        short_url = response.text
        return short_url
    
    def is_url(self, url):
        try:
            result = urlparse(url)
            return all([result.scheme, result.netloc])
        except ValueError:
            return False

    def get_joke(self) -> str:
        data = webhandler.get_json('https://randstuff.ru/joke/generate/')
        if('joke' not in data):
            return 'API Error: ' + webhandler.req_error
        else:
            return data['joke']['text']

    def get_fact(self) -> str:
        data = webhandler.get_json('https://randstuff.ru/fact/generate/')
        if('fact' not in data):
            return 'API Error: ' + webhandler.req_error
        else:
            return data['fact']['text']

    def get_where(self) -> str:
        data = webhandler.get_json('https://randstuff.ru/city/generate/')
        if('city' not in data):
            return 'API Error: ' + webhandler.req_error
        else:
            return f"–Ø –¥—É–º–∞—é, –≤ –≥–æ—Ä–æ–¥–µ {data['city']['city']} ({data['city']['country']})."
    
    def get_rand_question(self) -> str:
        lines = list(open('modules/randstuff/questions.txt', encoding="utf8"))
        return random.choice(lines)
    
    def get_rand_nickname(self) -> str:
        if random.choice([True, False]):
            return self.gen_rand_word(2).title() + " " + \
                self.gen_rand_word(1).title()
        else:
            randNicks = webhandler.post_json('https://plarium.com/services/api/nicknames/new/create?group=2&gender=2')
            return random.choice(randNicks)
        
    def gen_rand_word(self, type):  # type 2 - adjective (–ø—Ä–∏–ª–∞–≥–∞—Ç—å.) 1 - noun (—Å—É—â.)
        if(type == 2):
            lines = list(open('modules/randstuff/adjectives.txt', encoding="utf8"))
        else:
            lines = list(open('modules/randstuff/nouns.txt', encoding="utf8"))
        return random.choice(lines).strip()

    @commands.Cog.listener("on_message")
    async def chat_message(self, message: Message):
        if message.author.bot or not message.content:
            return

        message_text = message.content
        lowered_message = message_text.lower()
        mc_e = Counter(lowered_message).most_common(1)[0] # most common element

        if len(message_text)/100*50 < mc_e[1] and len(message_text) > 3:
            sta = mc_e[0] * random.randint(10, 30)
            await message.reply(self.upper_case_random_chars(sta))

        if lowered_message in ['–±–∏–ø', '–±–æ–ø', '–±—É–ø']:
            await message.reply(random.choice(['–ë–∏–ø', '–ë–æ–ø', '–ë—É–ø', 'null', 'undefined', 'out of bounds', '—Å–µ–±–µ –ø–æ'+lowered_message+'–∞–π', \
            '–Ø –≤ —Å–≤–æ–µ–º –ø–æ–∑–Ω–∞–Ω–∏–∏ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –ø—Ä–µ–∏—Å–ø–æ–ª–Ω–∏–ª—Å—è —á—Ç–æ —è –∫–∞–∫ –±—É–¥—Ç–æ –±—ã —É–∂–µ —Å—Ç–æ —Ç—Ä–∏–ª–ª–∏–æ–Ω–æ–≤ –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –ª–µ—Ç –ø—Ä–æ–∂–∏–≤–∞—é –Ω–∞ —Ç—Ä–∏–ª–ª–∏–æ–Ω–∞—Ö –∏ —Ç—Ä–∏–ª–ª–∏–æ–Ω–∞—Ö —Ç–∞–∫–∏—Ö –∂–µ –ø–ª–∞–Ω–µ—Ç, –ø–æ–Ω–∏–º–∞–µ—à—å –∫–∞–∫ —ç—Ç–∞ –∑–µ–º–ª—è.']))

        if lowered_message in ['–¥–µ–ª–∞—Ç—å?', '—Å—Ç—Ä–æ–∏—Ç—å?', 'b8', '–ø–æ–ª—É—á–∏—Ç—Å—è?', '–ø–æ–ª—É—á–∏–ª–æ—Å—å?', '–≤—ã—à–ª–æ?', '–≤—ã–π–¥–µ—Ç?']:
            answ8 = ['–ë–µ—Å—Å–ø–æ—Ä–Ω–æ', '–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ', '–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π', '–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞',
                     '–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º', '–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª', '–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ',
                     '–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã', '–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª', '–î–∞',
                     '–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞', '–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ', '–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å',
                     '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', '–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å',
                     '–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π', '–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª', '–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª',
                     '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ', '–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ']
            emojies = [':smiling_face_with_3_hearts:', ':sweat_smile:', ':sunglasses:',
                       ':upside_down:', ':point_up:', ':thinking:', ':woman_shrugging:', ':face_with_raised_eyebrow:',
                       ':eyes:', ':woman_gesturing_no:', ':dancer:', ':no_mouth:']
            await message.reply(random.choice(answ8) + " " + random.choice(emojies))

        if lowered_message in ['—Å–ø—Å', '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é']:
            await message.add_reaction('\N{COOKIE}')

        if lowered_message in ['—à—É—Ç–∫–∞–Ω–∏', '–ø–æ—à—É—Ç–∏', '–∞–Ω–µ–∫–¥–æ—Ç']:
            await message.channel.send(self.get_joke())
        
        if lowered_message in ['—Ñ–∞–∫—Ç', '–∏—Å—Ç–∏–Ω–∞']:
            await message.channel.send(self.get_fact())

        if lowered_message in ['–≥–¥–µ?', '–≥–¥–µ –æ–Ω?', '–≥–¥–µ –æ–Ω–∞?', '–≥–¥–µ —è?', '–≥–¥–µ —è –æ–∫–∞–∑–∞–ª—Å—è?', '–≥–¥–µ –∂–µ —è?', '–≥–¥–µ —è –Ω–∞—Ö–æ–∂—É—Å—å?', '–≥–¥–µ —è —Å–µ–π—á–∞—Å?', '–≥–¥–µ —è —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–∂—É—Å—å?']:
            await message.channel.send(self.get_where())

        if lowered_message in ['–∫—Ç–æ—è?', '–∫—Ç–æ —è?', '–∫—Ç–æ —è –µ—Å—Ç—å?', '–∫—Ç–æ –∂–µ —è?', '–Ω—É –∫—Ç–æ –∂–µ —è?', '–±–æ–∂–µ—á–∫–∏, —á—Ç–æ —è —Ç–∞–∫–æ–µ?!', '—Ö—Ç–æ —è?']:
            await message.reply("–¢—ã - " + self.gen_rand_word(1) + ".")
        
        if lowered_message in ['–∫—Ç–æ?', '–∫—Ç–æ –æ–Ω–∞?', '—Ö—Ç–æ –æ–Ω–∞?', '–∫—Ç–æ —Ç—ã?', '–∫—Ç–æ –æ–Ω?', '–∫—Ç–æ –∂–µ –æ–Ω?', '–∫—Ç–æ –∂–µ —Ç—ã?', '—Ö—Ç–æ –æ–Ω?', '—Ö—Ç–æ –∂–µ –æ–Ω?', '—Ö—Ç–æ —Ç—ã?']:
            await message.reply("–Ø –¥—É–º–∞—é, –æ–Ω - " + self.gen_rand_word(1) + ".")
        
        if lowered_message in ['–ø–æ—á–µ–º—É —è?', '–ø–æ—á–µ–º—É –æ–Ω?', '–ø–æ—á–µ–º—É –æ–Ω–∏?', '–ø–æ—á–µ–º—É –º—ã?', '–ø–æ—á–µ–º—É –æ–Ω–∞?', '–ø–æ—á–µ–º—É?']:
            await message.reply("–ü–æ—Ç–æ–º—É —á—Ç–æ " + self.gen_rand_word(1) + ".")

        if lowered_message in ['–∑–∞–¥–∞–π —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞', '–¥–∞–≤–∞–π –Ω–æ–≤—É—é —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞']:
            await message.reply('–•–æ—Ä–æ—à–æ. –Ø –∑–∞–¥–∞–º —Ç–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å:\n**' + self.get_rand_question() + '**\n–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –≤–º–µ—Å—Ç–µ –¥—Ä—É–≥–∏–º–∏.\n' +
                                       '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞ –ø—Ä–æ—à–ª—ã–π –∏—Å—á–µ—Ä–ø–∞–Ω - –Ω–∞–ø–∏—à–∏—Ç–µ "–¥–∞–≤–∞–π –Ω–æ–≤—É—é —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"') 

        if lowered_message in ['—Å–º–µ–Ω–∏–º–Ω–µ–Ω–∏–∫', '—Å–º–µ–Ω–∏ –º–Ω–µ –Ω–∏–∫–Ω–µ–π–º', '—Å–º–µ–Ω–∏ –º–Ω–µ –Ω–∏–∫', '—Å–º–µ–Ω–∏ –º–æ–π –Ω–∏–∫', '–∏–∑–º–µ–Ω–∏ –º–æ–π –Ω–∏–∫']:
            if(message.guild is None):
                await message.channel.send('–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!')
                return
            await message.channel.send('–ü–µ—á–∞—Ç–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç...')
            newNick = self.get_rand_nickname()
            try:
                await message.author.edit(nick=newNick)
            except:
                msg = '–ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –í–∞–º –Ω–æ–≤–æ–µ –∏–º—è: **' + newNick + '**\n' + \
                    '–ù–æ, —Å–ª—É–∂–±—ã —Å–≤—ã—à–µ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –Ω–∞–º –≤–º–µ—à–∏–≤–∞—Ç—å—Å—è. –¢–∞–∫ —á—Ç–æ —Å–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é.'
                await message.reply(msg)
            else:
                msg = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, **' + newNick + '**, –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–∏–¥–µ–ª–∏ :face_with_hand_over_mouth:\n'
                await message.channel.send(msg)      
    
    def upper_case_random_chars(self, string):
        result = ""
        for char in string:
            if random.choice([True, False]):
                result += char.upper()
            else:
                result += char
        return result


async def setup(bot):
    await bot.add_cog(Randstuff(bot))
