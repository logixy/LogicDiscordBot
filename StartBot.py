import discord
from discord import app_commands
import requests
import json
import random
import urllib
from requests.exceptions import Timeout
from discord.ext import tasks, commands
from discord.utils import get
import config as conf
from ProjectEverydayLogo import MakePerfect as mpi
import brainfuck as bf
from fake_useragent import UserAgent
import time
import yt_dlp
import ytmusicapi
import os
import uuid
import asyncio
from transliterate import slugify

class MyClient(discord.Client):
    req_error = ''

    async def on_ready(self):
        print('Logged on as', self.user)
        print('Uid:', self.user.id)
        await tree.sync()

        file_guild_id = open("server_gen_id.txt", "r").read()
        if file_guild_id != "":
            self.avserverId = self.get_guild(
                    int(file_guild_id))
            self.gen_rand_avatar.start()

    def get_from(self, url):
        headers = {'X-Requested-With': 'XMLHttpRequest',
                   'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:85.0) Gecko/20100101 Firefox/85.0'}
        try:
            req = requests.get(url, headers=headers, timeout=20)
        except Timeout:
            return False
        else:
            return json.loads(req.text)

    def gen_rand_word(self, type):  # type 2 - adjective (–ø—Ä–∏–ª–∞–≥–∞—Ç—å.) 1 - noun (—Å—É—â.)
        #req = self.get_from(
        #    'http://free-generator.ru/generator.php?action=word&type=' + str(type))
        #if(req == False):
        #    return '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: ' + self.req_error

        #return req['word']['word']
        if(type == 2):
            lines = list(open('adjectives.txt', encoding="utf8"))
        else:
            lines = list(open('nouns.txt', encoding="utf8"))
        return random.choice(lines).strip()

    avserverId = None

    @tasks.loop(minutes=30)
    async def gen_rand_avatar(self):
        if self.avserverId != None:
            try:
                mpi.generateIcon(drawModeRandom=False, drawMode=1, drawTextMode=1)
                with open('ProjectEverydayLogo/out/out.png', 'rb') as f:
                    icon = f.read()
                await self.avserverId.edit(icon=icon)
            except Exception as error:
                print(error)

    def convert_qwe_message(self, txt):
        qwe = list("qwertyuiop[]asdfghjkl;'zxcvbnm,./")
        conv_qwe = list("–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é.")
        txt = list(txt)
        for i in range(len(txt)):
            for j in range(len(qwe)):
                if txt[i] == qwe[j]:
                    txt[i] = conv_qwe[j]
        return ''.join(txt)

    def upper_case_random_chars(self, string):
        result = ""
        for char in string:
            if random.choice([True, False]):
                result += char.upper()
            else:
                result += char
        return result

    async def on_message(self, message):
        # don't respond to ourselves
        if message.author == self.user:
            return

        message.content = message.content.lower()
        original_layout_command = message.content
        # –ü–µ—Ä–µ–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π —Ä–∞—Å–∫–ª–∞–¥–∫–µ
        if len(message.content) > 0:
                if not (message.content[0] in "–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é"):
                        message.content = self.convert_qwe_message(message.content)
        # print(message.content)
        if(message.content == '<@!' + str(self.user.id) + '>'):
            text = '–ß—Ç–æ –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ?\n ' + \
                '**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:** \n' + \
                '<@!' + str(self.user.id) + '> - –í—ã–∑–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É\n' + \
                '`C–º–µ–Ω–∏ –∞–≤—É –ø–ª–∑` - –°–º–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π\n' + \
                '    –ê–ª–∏—Å—ã: `—Å–º–µ–Ω–∏ –∞–≤–∞—Ç–∞—Ä —Å–µ—Ä–≤–µ—Ä–∞`, `—Å–º–µ–Ω–∏ –∏–∫–æ–Ω–∫—É —Å–µ—Ä–≤–µ—Ä–∞`, `—Å–º–µ–Ω–∏ –∏–∫–æ–Ω–∫—É –ø–ª–∑`\n' + \
                '`–ë–∏–ø` - –ü–æ—Å–ª–∞—Ç—å –±–æ—Ç–æ–≤\n' + \
                '    –ê–ª–∏—Å—ã: `–±–æ–ø`, `–±—É–ø`\n' + \
                '`–®—É—Ç–∫–∞–Ω–∏` -  –°–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞\n' + \
                '    –ê–ª–∏—Å—ã: `–ø–æ—à—É—Ç–∏`, `–∞–Ω–µ–∫–¥–æ—Ç`\n' + \
                '`–§–∞–∫—Ç` - –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n' + \
                '    –ê–ª–∏—Å—ã: `–∏—Å—Ç–∏–Ω–∞`\n' + \
                '`–¢–æ–ø –≥–æ–ª–æ—Å—É—é—â–∏—Ö` - –í—ã–≤–µ—Å—Ç–∏ —Ç–æ–ø –≥–æ–ª–æ—Å—É—é—â–∏—Ö –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç\n' + \
                '    –ê–ª–∏—Å—ã: `—Ç–æ–ø –≥–æ–ª–æ—Å–æ–≤`, `—Ç–æ–ø –≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö`\n' + \
                '`–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤` - –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤\n' + \
                '    –ê–ª–∏—Å—ã: `—Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞`, `server stat`, `—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞`\n' + \
                '`–ö—Ç–æ —è?` - –£–∑–Ω–∞—Ç—å –∫—Ç–æ —Ç—ã –µ—Å—Ç—å –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ\n' + \
                '    –ê–ª–∏—Å—ã: `–∫—Ç–æ —è –µ—Å—Ç—å?`, `–∫—Ç–æ –∂–µ —è?`, `–Ω—É –∫—Ç–æ –∂–µ —è?`, `–±–æ–∂–µ—á–∫–∏, —á—Ç–æ —è —Ç–∞–∫–æ–µ?!`\n' + \
                '`–ö—Ç–æ —Ç—ã?` - –ö—Ç–æ –∂–µ –æ–Ω?\n' + \
                '    –ê–ª–∏—Å—ã: `–∫—Ç–æ –æ–Ω?`, `–∫—Ç–æ –∂–µ –æ–Ω?`, `–∫—Ç–æ –∂–µ —Ç—ã?`\n' + \
                '`–ü–æ–ª—É—á–∏—Ç—Å—è?` - –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å–ø—Ä–æ—Å–∏, –∞ –ø–æ–ª—É—á–∏—Ç—Å—è –ª–∏ —É —Ç–µ–±—è?\n' + \
                '    –ê–ª–∏—Å—ã: `–ø–æ–ª—É—á–∏–ª–æ—Å—å?`, `–≤—ã—à–ª–æ?`, `–≤—ã–π–¥–µ—Ç?`\n' + \
                '`–ü–∏–Ω–≥` - –ü–æ–Ω–≥!\n' + \
                '    –ê–ª–∏—Å—ã: `ping`, `–ø–∏–Ω–≥!`, `ping!`\n' + \
                '`–°–º–µ–Ω–∏ –º–Ω–µ –Ω–∏–∫–Ω–µ–π–º` - –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –ª–∏—á–Ω–æ—Å—Ç—å –≤ –Ω–∞—à–µ–º —Å–∞–º–æ–ø—Ä–æ–≤–æ–∑–≥–ª–∞—à–µ–Ω–Ω–æ–º –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ\n' + \
                '    –ê–ª–∏—Å—ã: `—Å–º–µ–Ω–∏ –º–Ω–µ –Ω–∏–∫`, `—Å–º–µ–Ω–∏ –º–æ–π –Ω–∏–∫`, `–∏–∑–º–µ–Ω–∏ –º–æ–π –Ω–∏–∫`\n' + \
                '`C–±—Ä–æ—Å—å –º–æ–π –Ω–∏–∫` - –í–µ—Ä–Ω—É—Ç—Å—è –∫ –ø—Ä–æ—à–ª–æ–π –∂–∏–∑–Ω–∏ –∏ –∑–∞–±—ã—Ç—å –≤—Å–µ –Ω–µ–≤–∑–≥–æ–¥—ã.\n' + \
                '    –ê–ª–∏—Å—ã: `—Å–±—Ä–æ—Å—å –º–Ω–µ –Ω–∏–∫`, `—Å–∫–∏–Ω—å –º–æ–π –Ω–∏–∫`\n' + \
                '`–ó–∞–¥–∞–π —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞` -  –í–∞–º –Ω–µ –æ —á–µ–º –ø–æ–±–æ–ª—Ç–∞—Ç—å? –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∞—Ç—å —Ç–µ–º—É. —É –±–æ—Ç–∞.\n' + \
                '    –ê–ª–∏—Å—ã: `–¥–∞–≤–∞–π –Ω–æ–≤—É—é —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞`\n' + \
                '`–ì–¥–µ —è?` - –ï—Å–ª–∏ –≤—ã –≤–¥—Ä—É–≥ –ø–æ—Ç–µ—Ä—è–ª–∏—Å—å, –º–æ–∂–µ—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ö–æ–∂–µ–≥–æ –±–æ—Ç–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è.\n' + \
                '    –ê–ª–∏—Å—ã: `–≥–¥–µ —è –æ–∫–∞–∑–∞–ª—Å—è?`, `–≥–¥–µ –∂–µ —è?`, `–≥–¥–µ —è –Ω–∞—Ö–æ–∂—É—Å—å?`, `–≥–¥–µ —è —Å–µ–π—á–∞—Å?`, `–≥–¥–µ —è —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–∂—É—Å—å?`\n'
            await message.reply(text)

        if len(message.content) == message.content.upper().count("–ê") and len(message.content) > 2:
            sta = "–∞" * random.randint(10, 30)
            await message.reply(self.upper_case_random_chars(sta))

        if message.content in ['–±–∏–ø', '–±–æ–ø', '–±—É–ø']:
            await message.reply(random.choice(['–ë–∏–ø', '–ë–æ–ø', '–ë—É–ø', 'null', 'undefined', 'out of bounds', '—Å–µ–±–µ –ø–æ'+message.content+'–∞–π', \
            '–Ø –≤ —Å–≤–æ–µ–º –ø–æ–∑–Ω–∞–Ω–∏–∏ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –ø—Ä–µ–∏—Å–ø–æ–ª–Ω–∏–ª—Å—è —á—Ç–æ —è –∫–∞–∫ –±—É–¥—Ç–æ –±—ã —É–∂–µ —Å—Ç–æ —Ç—Ä–∏–ª–ª–∏–æ–Ω–æ–≤ –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ –ª–µ—Ç –ø—Ä–æ–∂–∏–≤–∞—é –Ω–∞ —Ç—Ä–∏–ª–ª–∏–æ–Ω–∞—Ö –∏ —Ç—Ä–∏–ª–ª–∏–æ–Ω–∞—Ö —Ç–∞–∫–∏—Ö –∂–µ –ø–ª–∞–Ω–µ—Ç, –ø–æ–Ω–∏–º–∞–µ—à—å –∫–∞–∫ —ç—Ç–∞ –∑–µ–º–ª—è.']))

        if message.content in ['–∑–∞–ø—É—Å—Ç–∏ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–≤–∞—Ç–∞—Ä–∫–∏']:
            if not(message.author.guild_permissions.administrator):
                await message.channel.send(self.gen_rand_word(2).title() + ', —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–º–∞–Ω–¥–µ üò•')
                return
            print(self.avserverId, message.guild.id)
            self.avserverId = self.get_guild(
                int(message.guild.id))
            print(self.avserverId, message.guild.id)
            if not self.gen_rand_avatar.is_running():
                file_guild_id = open("server_gen_id.txt", "w")
                file_guild_id.write(str(message.guild.id))
                self.gen_rand_avatar.start()
                await message.reply('–ó–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç.')
            else:
                await message.reply('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.')
        if message.content in ['–æ—Å—Ç–∞–Ω–æ–≤–∏ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∞–≤–∞—Ç–∞—Ä–∫–∏']:
            if not(message.author.guild_permissions.administrator):
                await message.channel.send(self.gen_rand_word(2).title() + ', —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–º–∞–Ω–¥–µ üò•')
                return
            file_guild_id = open("server_gen_id.txt", "w")
            file_guild_id.write("")
            self.gen_rand_avatar.stop()
            await message.reply('–ê–≤—Ç–æ-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç - –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è.')

        if message.content in ['—Å–º–µ–Ω–∏ –∞–≤—É –ø–ª–∑', '—Å–º–µ–Ω–∏ –∞–≤–∞—Ç–∞—Ä —Å–µ—Ä–≤–µ—Ä–∞', '—Å–º–µ–Ω–∏ –∏–∫–æ–Ω–∫—É —Å–µ—Ä–≤–µ—Ä–∞', '—Å–º–µ–Ω–∏ –∏–∫–æ–Ω–∫—É –ø–ª–∑', '—Å–º–µ–Ω–∏ –ª–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞', '—Å–º–µ–Ω–∏ –ª–æ–≥–æ']:
            if not(message.author.guild_permissions.administrator):
                await message.channel.send(self.gen_rand_word(2).title() + ', —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–º–∞–Ω–¥–µ üò•')
                return
            if(message.guild == None):
                await message.channel.send('–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!')
                return
            m2 = ['–ü–µ—Ä–µ–¥–∞—é –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞—à–µ–º—É —Ö—É–¥–æ–∂–Ω–∏–∫—É...', '–°–Ω–∏–∂–∞–µ–º –ó–ü –¥–∏–∑–∞–π–Ω–µ—Ä–∞...', '–í—ã–∑—ã–≤–∞–µ–º –æ–º–æ–Ω –≤ –¥–æ–º —Ö—É–¥–æ–∂–Ω–∏–∫–∞...',
                  '–í–µ–∂–ª–∏–≤–æ —É–≥–æ–≤–∞—Ä–∏–≤–∞–µ–º —Ö—É–¥–æ–∂–Ω–∏–∫–∞...', '–ü–æ–¥ –ø—ã—Ç–∫–∞–º–∏ –∑–∞—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—à–µ–≥–æ –¥–∏–∑–∞–π–Ω–µ—Ä–∞...']
            await message.reply('–ü—Ä–∏–Ω—è—Ç–æ! ' + random.choice(m2))
            mpi.generateIcon(drawModeRandom=False, drawMode=1, drawTextMode=1)
            server = self.get_guild(int(message.guild.id))

            with open('ProjectEverydayLogo/out/out.png', 'rb') as f:
                icon = f.read()
            await server.edit(icon=icon)
            await message.reply('–ì–æ—Ç–æ–≤–æ!')
        if message.content in ['—à—É—Ç–∫–∞–Ω–∏', '–ø–æ—à—É—Ç–∏', '–∞–Ω–µ–∫–¥–æ—Ç']:
            req = self.get_from('https://randstuff.ru/joke/generate/')
            if(req == False):
                await message.reply('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: ' + self.req_error)
                return
            await message.channel.send(req['joke']['text'])
        if message.content in ['—Ñ–∞–∫—Ç', '–∏—Å—Ç–∏–Ω–∞']:
            req = self.get_from('https://randstuff.ru/fact/generate/')
            if(req == False):
                await message.reply('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: ' + self.req_error)
                return
            await message.channel.send(req['fact']['text'])
        if message.content in ['—Ç–æ–ø –≥–æ–ª–æ—Å—É—é—â–∏—Ö', '—Ç–æ–ø –≥–æ–ª–æ—Å–æ–≤', '—Ç–æ–ø –≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö']:
            spisok = self.get_from(
                'https://logicworld.ru/launcher/tableTopVote.php?mode=api')
            if(spisok == False):
                await message.reply('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: ' + self.req_error)
                return
            text = "–ù–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç —Ç–æ–ø –≥–æ–ª–æ—Å—É—é—â–∏—Ö —Ç–∞–∫–æ–π:\n"
            i = 0
            for userdata in spisok:
                static_text = " - **" + userdata['user'].replace('_', '\\_').title(
                ) + "** –°—á—ë—Ç - **" + userdata['ammount'] + "** –î–æ–ø. –≥–æ–ª–æ—Å–∞ - **" + userdata['cheatAmmount'] + "**\n"
                text += str(i + 1) + static_text
                i += 1
            await message.reply(text)
        if message.content in ['—Å—Ç–∞—Ç—É—Å—Å–µ—Ä–≤–µ—Ä–æ–≤', '—Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤', '—Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞', 'server stat', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞']:
            spisok = self.get_from('https://logicworld.ru/monAJAX/cache/cache.json')
            if(spisok == False):
                await message.reply('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: ' + self.req_error)
            else:
                text = "–°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤:\n"
                for s_name in spisok['servers']:
                    s_data = spisok['servers'][s_name]

                    if (s_data['status'] == 'online'):
                        stat_e = ':green_circle:'
                        if (s_data['ping'] > 300):
                            stat_e = ':yellow_circle:'
                        if (s_data['ping'] > 350):
                            stat_e = ':orange_circle:'
                        if (s_data['ping'] > 450):
                            stat_e = ':brown_circle:'
                        text += stat_e + "**" + s_name + "** - (" + str(s_data['online']) + "/" + str(
                            s_data['slots']) + ") (" + str(s_data['ping']) + "ms)\n"
                    else:
                        text += ":red_circle:**" + s_name + \
                            "** - (**" + s_data['status'] + "**)" + "\n"
                text += "\n**–û–±—â–∏–π –æ–Ω–ª–∞–π–Ω:** " + \
                    str(spisok['online']) + "/" + str(spisok['slots']) + "\n"
                text += "**–†–µ–∫–æ—Ä–¥ –¥–Ω—è:** " + \
                    str(spisok['recordday']) + \
                    " (" + spisok['timerecday'] + ")\n"
                text += "**–†–µ–∫–æ—Ä–¥:** " + \
                    str(spisok['record']) + " (" + spisok['timerec'] + ")\n"
                await message.reply(text)
            text = "**–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:**\n"
            servers_stats = self.get_from('https://status.logicworld.ru/api')
            errors_data = {
                'Server \#1': '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ—Ä–≤–µ—Ä #1! C–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ç —ç–Ω–µ—Ä–≥–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ª–∏–±–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.',
                'CDN': '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–∞–≤–Ω—ã–π CDN. –ú–æ–∂–µ—Ç –Ω–∞–±–ª—é–¥–∞—Ç—å—Å—è –Ω–∏–∑–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.',
                'Server \#2': '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω —Å–µ—Ä–≤–µ—Ä #2! C–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ç —ç–Ω–µ—Ä–≥–æ–æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ª–∏–±–æ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.',
                'Radio': '–ù–∞–±–ª—é–¥–∞—é—Ç—Å—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–¥–∏–æ-—Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–∏–¥–µ—Ç—Å—è –ø–æ—Å–∏–¥–µ—Ç—å –≤ —Ç–∏—à–∏–Ω–µ. –ï–≥–æ –≤–æ–æ–±—â–µ –∫—Ç–æ-—Ç–æ —Å–ª—É—à–∞–µ—Ç?!',
                'Launch-server': '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ª–∞—É–Ω—á-—Å–µ—Ä–≤–µ—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –í–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ª–∞—É–Ω—á–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.'
            }
            err_data = ''
            for server in servers_stats:
                if (server['available'] != 'Online'):
                    stat_e = ':red_circle:'
                    if (server['name'] in errors_data):
                        err_data += ":exclamation: " + errors_data[server['name']] + "\n";
                else:
                    stat_e = ':green_circle:'
                text += stat_e + "**" + \
                    server['name'] + "** - " + server['available'] + "\n"
            text += "\n" + err_data + "\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–µ–∫—Ç–∞ <https://status.logicworld.ru/>"
            await message.reply(text)
        if message.content in ['–¥–∞–π–¥–µ–Ω–µ–≥', '–¥–∞–π –¥–µ–Ω—è–≥', '–¥–µ–Ω—è–≥ –¥–∞–π', '–¥–∞–π –¥–µ–Ω–µ–≥', '–¥–µ–Ω–µ–≥ –¥–∞–π', '–≤—ã–¥–∞–π –¥–µ–Ω–µ–≥', '–ø—à–º—É —å—É —å—â—Ç—É–Ω']:
            await message.reply("–î–µ—Ä–∂–∏ $" + str(random.randrange(1,12)))
        if message.content in ['–∫—Ç–æ—è?', '–∫—Ç–æ —è?', '–∫—Ç–æ —è –µ—Å—Ç—å?', '–∫—Ç–æ –∂–µ —è?', '–Ω—É –∫—Ç–æ –∂–µ —è?', '–±–æ–∂–µ—á–∫–∏, —á—Ç–æ —è —Ç–∞–∫–æ–µ?!', '—Ö—Ç–æ —è?']:
            await message.reply("–¢—ã - " + self.gen_rand_word(1) + ".")
        if message.content in ['–∫—Ç–æ?', '–∫—Ç–æ –æ–Ω–∞?', '—Ö—Ç–æ –æ–Ω–∞?', '–∫—Ç–æ —Ç—ã?', '–∫—Ç–æ –æ–Ω?', '–∫—Ç–æ –∂–µ –æ–Ω?', '–∫—Ç–æ –∂–µ —Ç—ã?', '—Ö—Ç–æ –æ–Ω?', '—Ö—Ç–æ –∂–µ –æ–Ω?', '—Ö—Ç–æ —Ç—ã?']:
            await message.reply("–Ø –¥—É–º–∞—é, –æ–Ω - " + self.gen_rand_word(1) + ".")
        if message.content in ['–ø–æ—á–µ–º—É —è?', '–ø–æ—á–µ–º—É –æ–Ω?', '–ø–æ—á–µ–º—É –æ–Ω–∏?', '–ø–æ—á–µ–º—É –º—ã?', '–ø–æ—á–µ–º—É –æ–Ω–∞?', '–ø–æ—á–µ–º—É?']:
            await message.reply("–ü–æ—Ç–æ–º—É —á—Ç–æ " + self.gen_rand_word(1) + ".")
        if message.content in ['–≥–¥–µ?', '–≥–¥–µ –æ–Ω?', '–≥–¥–µ –æ–Ω–∞?', '–≥–¥–µ —è?', '–≥–¥–µ —è –æ–∫–∞–∑–∞–ª—Å—è?', '–≥–¥–µ –∂–µ —è?', '–≥–¥–µ —è –Ω–∞—Ö–æ–∂—É—Å—å?', '–≥–¥–µ —è —Å–µ–π—á–∞—Å?', '–≥–¥–µ —è —Å–µ–π—á–∞—Å –Ω–∞—Ö–æ–∂—É—Å—å?']:
            req = self.get_from('https://randstuff.ru/city/generate/')
            await message.reply("–Ø –¥—É–º–∞—é, –≤ –≥–æ—Ä–æ–¥–µ " + req['city']['city'] + " (" + req['city']['country'] + ").")
        if message.content in ['–¥–µ–ª–∞—Ç—å?', '—Å—Ç—Ä–æ–∏—Ç—å?', 'b8', '–ø–æ–ª—É—á–∏—Ç—Å—è?', '–ø–æ–ª—É—á–∏–ª–æ—Å—å?', '–≤—ã—à–ª–æ?', '–≤—ã–π–¥–µ—Ç?']:
            answ8 = ['–ë–µ—Å—Å–ø–æ—Ä–Ω–æ', '–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ', '–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π', '–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞',
                     '–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º', '–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª', '–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ',
                     '–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã', '–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª', '–î–∞',
                     '–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞', '–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ', '–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å',
                     '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å', '–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Å—è –∏ —Å–ø—Ä–æ—Å–∏ –æ–ø—è—Ç—å',
                     '–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π', '–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª', '–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª',
                     '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ', '–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ']
            emojies = [':smiling_face_with_3_hearts:', ':sweat_smile:', ':sunglasses:',
                       ':upside_down:', ':point_up:', ':thinking:', ':woman_shrugging:', ':face_with_raised_eyebrow:',
                       ':eyes:', ':woman_gesturing_no:', ':dancer:', ':no_mouth:']
            await message.reply(random.choice(answ8).lower() + " " + random.choice(emojies))
        if message.content in ['–ø–∏–Ω–≥', 'ping', '–ø–∏–Ω–≥!', 'ping!']:
            await message.reply('–ü–æ–Ω–≥!')
        if message.content in ['—Å–º–µ–Ω–∏–º–Ω–µ–Ω–∏–∫', '—Å–º–µ–Ω–∏ –º–Ω–µ –Ω–∏–∫–Ω–µ–π–º', '—Å–º–µ–Ω–∏ –º–Ω–µ –Ω–∏–∫', '—Å–º–µ–Ω–∏ –º–æ–π –Ω–∏–∫', '–∏–∑–º–µ–Ω–∏ –º–æ–π –Ω–∏–∫']:
            if(message.guild == None):
                await message.channel.send('–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!')
                return
            await message.channel.send('–ü–µ—á–∞—Ç–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Å–ø–æ—Ä—Ç...')
            '''
            req = self.get_from(
                'http://free-generator.ru/generator.php?action=word&type=2')
            if(req == False):
                await message.reply('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: ' + self.req_error)
                return
            req2 = self.get_from(
                'http://free-generator.ru/generator.php?action=word&type=1')
            profession = json.loads(requests.post(
                'https://randomall.ru/api/general/jobs').text)
            if(req2 == False or profession == False):
                await message.reply('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: ' + self.req_error)
                return
            '''
            if random.choice([True, False, False, False]):
                newNick = self.gen_rand_word(2).title() + " " + \
                    self.gen_rand_word(1).title()
            else:
                randNicks = json.loads(requests.post('https://plarium.com/services/api/nicknames/new/create?group=2&gender=2').text)
                newNick = random.choice(randNicks)
            try:
                await message.author.edit(nick=newNick)
            except:
                msg = '–ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –í–∞–º –Ω–æ–≤–æ–µ –∏–º—è: **' + newNick + '**\n' + \
                    '–ù–æ, —Å–ª—É–∂–±—ã —Å–≤—ã—à–µ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –Ω–∞–º –≤–º–µ—à–∏–≤–∞—Ç—Å—è. –¢–∞–∫ —á—Ç–æ —Å–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Ä—É—á–Ω—É—é.'
                await message.reply(msg)
            else:
                msg = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, **' + newNick + '**, –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –≤–∏–¥–µ–ª–∏ :face_with_hand_over_mouth:\n'
                await message.channel.send(msg)
        if message.content in ['—Å–±—Ä–æ—Å—å –º–æ–π –Ω–∏–∫', '—Å–±—Ä–æ—Å—å –º–Ω–µ –Ω–∏–∫', '—Å–∫–∏–Ω—å –º–æ–π –Ω–∏–∫']:
            if(message.guild == None):
                await message.reply('–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!')
                return
            try:
                await message.author.edit(nick=None)
            except:
                await message.reply('–°–ª—É–∂–±—ã —Å–≤—ã—à–µ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –Ω–∞–º –≤–º–µ—à–∏–≤–∞—Ç—Å—è.')
            else:
                await message.reply('–ú—ã —Ä–∞—Å–∫—Ä—ã–ª–∏ –≤–∞—à—É –∏—Å—Ç–µ–Ω–Ω—É—é —Å—É—â–Ω–æ—Å—Ç—å.')
        if message.content in ['—Ä–∞—Å–∫—Ä–æ–π —Å—É—â–Ω–æ—Å—Ç—å –≤—Å–µ—Ö']:
            if not(message.author.guild_permissions.administrator):
                await message.channel.send(self.gen_rand_word(2).title() + ', —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–º–∞–Ω–¥–µ üò•')
                return
            if(message.guild == None):
                await message.reply('–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ!')
                return
            await message.reply('...')
            members = message.guild.members
            for i, member in enumerate(members):
                try:
                    await member.edit(nick=None)
                except:
                    await message.reply('–°–ª—É–∂–±—ã —Å–≤—ã—à–µ –∑–∞–ø—Ä–µ—Ç–∏–ª–∏ –Ω–∞–º –≤–º–µ—à–∏–≤–∞—Ç—Å—è –≤ —Å—É–¥—å–±—É ' + str(member.nick))
                else:
                    await message.reply('['+str(i)+'/'+str(len(members))+'] ' + str(member))
        if message.content in ['–∑–∞–¥–∞–π —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞', '–¥–∞–≤–∞–π –Ω–æ–≤—É—é —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞']:
            lines = list(open('questions.txt', encoding="utf8"))
            question = random.choice(lines)
            await message.channel.send('–•–æ—Ä–æ—à–æ. –Ø –∑–∞–¥–∞–º —Ç–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å:\n**' + question + '**\n–ü–æ—Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–µ–≥–æ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä –≤–º–µ—Å—Ç–µ –¥—Ä—É–≥–∏–º–∏.\n' +
                                       '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä –Ω–∞ –ø—Ä–æ—à–ª—ã–π –∏—Å—á–µ—Ä–ø–∞–Ω - –Ω–∞–ø–∏—à–∏—Ç–µ "–¥–∞–≤–∞–π –Ω–æ–≤—É—é —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"')
        if original_layout_command.startswith('bf'):
            comm = original_layout_command.split(" ")
            if len(comm) == 2:
                await message.channel.send(bf.run(comm[1]))
        if original_layout_command.startswith('?chat'):
            mess = original_layout_command.split(" ")
            if len(mess) >= 2:
                await message.add_reaction('\N{THINKING FACE}')
                text = ' '.join(mess[1:])
                for i in range(1):
                    headers = {'User-Agent': UserAgent().random}
                    payload = {'inputs': text, 'key': 'XDGGECL86F7ABPLBG4OFQL2EBD5XR5NLIV4'}
                    text = requests.get('https://api.betterapi.net/youchat', params=payload, headers=headers).json()
                    if 'generated_text' in text:
                        break
                    time.sleep(1)

                if 'generated_text' in text:
                    gen_text = text['generated_text']
                    gen_text = gen_text.replace('&lt;', '<')
                    gen_text = gen_text.replace('&gt;', '>')
                    gen_text = gen_text.replace('&le;', '‚â§')
                    gen_text = gen_text.replace('&ge;', '‚â•')
                    gen_text = gen_text.replace('&amp;', '&')
                    gen_text = gen_text.replace('&nbsp;', '¬†')
                    gen_text = gen_text.replace('&quot;', '"')
                    gen_text = gen_text.replace('&apos;', "'")
                    gen_text = gen_text.replace('&cent;', '¬¢')
                    gen_text = gen_text.replace('&pound;', '¬£')
                    gen_text = gen_text.replace('&yen;', '¬•')
                    gen_text = gen_text.replace('&euro;', '‚Ç¨')
                    gen_text = gen_text.replace('&copy;', '¬©')
                    gen_text = gen_text.replace('&reg;', '¬Æ')
                    chunk_size = 1990  # Set the maximum size of each chunk
                    chunks = [gen_text[i:i+chunk_size] for i in range(0, len(gen_text), chunk_size)]
                    for chunk in chunks:
                        await message.channel.send(chunk)
                else:
                    if 'error' in text:
                        await message.channel.send(text['error'])
                    else:
                        await message.channel.send('Request error see the details in the console')
                        print(text)
                        print(headers, payload)
                #await message.remove_reaction('\N{THINKING FACE}')
                #await message.channel.send(text)
        if message.content in ['—Å–ø—Å', '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é']:
            await message.add_reaction('\N{COOKIE}')


intents = discord.Intents.all()
intents.message_content = True
client = MyClient(intents=intents)
#client.run(conf.bot_token)
tree = app_commands.CommandTree(client)

@tree.command(name = "ping", description = "Ping the bot")
async def ping_command(interaction):
    await interaction.response.send_message("Pong!")

@tree.command(name = "whoami", description = "Who am i?")
async def whoami_command(interaction):
    await interaction.response.send_message("–¢—ã - " + client.gen_rand_word(2) + ".")

@tree.command(name = "fact", description = "Get the fact")
async def fact_command(interaction):
    req = client.get_from('https://randstuff.ru/fact/generate/')
    if(req == False):
        res = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: ' + client.req_error
    else:
        res = req['fact']['text']
    await interaction.response.send_message(res)

@tree.command(name = "whoisit", description = "Who is it?")
async def whoisit_command(interaction):
    await interaction.response.send_message("–Ø –¥—É–º–∞—é, –æ–Ω  - " + client.gen_rand_word(2) + ".")

@tree.command(name = "google", description = "Search in google..")
async def google_command(interaction, search_msg:str):
    search_msg = '+'.join(search_msg.split())
    res_mess = f"–Ø –¥—É–º–∞—é, —ç—Ç–æ –∑–¥–∞—Å—å: [Google](https://www.google.com/search?q={search_msg})"
    await interaction.response.send_message(res_mess);
  
async def dl_worker(interaction, name: str, video: bool):
    start_dl = time.time()
    await interaction.response.send_message('[-1/3] Getting data...')
    tmp_dir = "tmp"
    r_filename = str(uuid.uuid4())
    ydl_opts = {
        'verbose': True,
        'format': 'bestaudio/best',
        'outtmpl': f"{tmp_dir}/{r_filename}.%(ext)s", # {tmp_dir}/%(title)s.%(ext)s
        'writethumbnail': True,
        'embedthumbnail': True,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }, {
            'key': 'FFmpegMetadata',
            'add_metadata': True,
        }, { # Embed thumbnail in file 
            'key': 'EmbedThumbnail', 
            'already_have_thumbnail': False, 
        }]
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            if (name.startswith("http")):
                info = ydl.extract_info(f"{name}", download=False)
                url = info['webpage_url']
                d = int(info['duration'])
            else:
                # Search on ytMusic use ytmAPI
                ytm = ytmusicapi.YTMusic()
                info = ytm.search(name)[0]
                url = f"https://music.youtube.com/watch?v={info['videoId']}"
                d = int(info['duration_seconds'])
                # info = ydl.extract_info(f"ytsearch:{name}", download=False)['entries'][0] # Search in YouTube
            await interaction.edit_original_response(content='[1/3] Checking...')
            if d > 1000:
                raise Exception("Duration longest 1000s")
            title = info['title']
            ext = 'mp4' if video else 'mp3'
            r_filename = slugify(title)
            if (r_filename == None):
                r_filename = title.replace(' ', '-')
            file = f"{r_filename}.{ext}"
            path = os.getcwd() + '/' + (tmp_dir+'/'+file).strip()
            await interaction.edit_original_response(content=f"[2/3] Loading...")
            #ydl.download([url])
            # –ö–æ—Å—Ç—ã–ª—åGaming inc (multi-threaded ultra asynchronous download)
            if (video):
                proc = await asyncio.create_subprocess_exec(
                    conf.yt_dlp_addr, '-f', 'b[filesize<=25M] / b[filesize_approx<=25M] / [tbr<600] / w',
                    '-S', 'res,ext:mp4:m4a', '--recode', ext,
                    '--ignore-errors', '--embed-thumbnail', '--progress', '--newline',
                    '--embed-metadata', '--output', f"{tmp_dir}/{r_filename}.%(ext)s", url,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE)
            else:
                proc = await asyncio.create_subprocess_exec(
                    conf.yt_dlp_addr, '-x', '--audio-format', 
                    'mp3', '--ignore-errors', '--embed-thumbnail', '--progress', '--newline',
                    '--embed-metadata', '--output', f"{tmp_dir}/{r_filename}.%(ext)s", url,
                    stdout=asyncio.subprocess.PIPE,
                    stderr=asyncio.subprocess.PIPE)
            #stdout, stderr = await proc.communicate()
            #print(f'[{proc.returncode}]')
            #print(f'{stdout.decode()}')
            #print(f'{stderr.decode()}')
            start_dlg = time.time()-1
            while True:
                line = await proc.stdout.readline()
                if not line:
                    break
                current_time = time.time()
                if current_time - start_dlg >= 1:
                    await interaction.edit_original_response(content='[2.5/3] '+line.decode().strip())
                    start_dlg = current_time
            await proc.wait()
            
            await interaction.edit_original_response(content='[3/3] Uploading...')

            check_file = os.path.exists(path)

            await interaction.edit_original_response(content=f"[4/3] Check file {str(check_file)} {file}...")
            
            if check_file:
                await interaction.edit_original_response(content=f"[5/3] Uploading...")
                time_dl = round(time.time() - start_dl, 2)
                title = f"{title} _({str(time_dl)}s)_"
                await interaction.edit_original_response(content=title,attachments=[discord.File(path)]);
                os.remove(path)

    except Exception as e:
        e = str(e)
        e = e.replace("\u001b\u005b\u0030\u003b\u0033\u0031\u006d", '**')
        e = e.replace("\u001b\u005b\u0030\u006d", '**')
        e = e.replace("\u001b\u005b\u0030\u003b\u0039\u0034\u006d", '**')
        await interaction.edit_original_response(content=e)


@tree.command(name = "dl", description = "download")
async def dl_command(interaction, name:str, video: bool=False):
    await dl_worker(interaction, name, video)
    


# Clear temp directory
for f in os.listdir('tmp'):
    os.remove(os.path.join('tmp', f))

client.run(conf.bot_token)
